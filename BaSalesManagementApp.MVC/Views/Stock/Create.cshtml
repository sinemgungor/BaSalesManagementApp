@model BaSalesManagementApp.MVC.Models.StockVMs.StockCreateVM

@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer

@{
    ViewData["Title"] = localizer["Create"];
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["Stock"] /</span>
            @localizer["Create"]
        </h4>
        <div class="row">
            
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                        <form id="stockForm" asp-action="Create" method="post" novalidate>
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                            <div class="mb-3">
                                <label asp-for="ProductId" class="form-label">@localizer["Product_Name"]</label>
                                <select asp-for="ProductId" class="form-control" id="productSelect" style="width: 100%;">
                                    <option value="">@localizer["Select_Product"]</option>
                                    @foreach (var product in Model.Products)
                                    {
                                        <option value="@product.Id">@product.Name</option>
                                    }
                                </select>
                                <span class="text-danger" id="productError"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="Count" class="form-label">@localizer["Count"]</label>
                                <input asp-for="Count" class="form-control" id="Count" />
                                <span class="text-danger" id="countError"></span>
                            </div>

                            <div>
                                <input type="submit" value="@localizer["Create"]" class="btn btn-primary" />
                                <a asp-action="Index" class="btn btn-secondary">@localizer["BackToList"]</a>
                            </div>
                        </form>
                    </div>

                    </div>
                </div>
            
        </div>

    </div>
</div>


@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

    <script>
        var countRequiredMessage = @Json.Serialize(localizer[Messages.STOCK_EMPTY_VALIDATION].Value);
        var countPositiveMessage = @Json.Serialize(localizer[Messages.STOCK_POSITIVE_VALIDATION].Value);
        var countWholeNumberMessage = @Json.Serialize(localizer[Messages.STOCK_WHOLENUMBER_VALIDATION].Value);

        var productRequiredMessage = @Json.Serialize(localizer[Messages.STOCK_PRODUCT_RELATION].Value);

        $(document).ready(function () {

            $('#productSelect').select2({
                placeholder: "@Html.Raw(localizer["Select_a_Product"])",
                allowClear: true,
                matcher: function (params, data) {

                    if ($.trim(params.term) === '') {
                        return data;
                    }


                    if (typeof data.text === 'undefined') {
                        return null;
                    }


                    var searchTerm = params.term.toLowerCase();
                    var optionText = data.text.toLowerCase();


                    if (optionText.startsWith(searchTerm)) {
                        return data;
                    }


                    return null;
                },
                sorter: function (data) {

                    return data.sort(function (a, b) {
                        return a.text.localeCompare(b.text);
                    });
                }
            }).on('select2:unselecting', function () {

                $("#productError").text(productRequiredMessage);
            }).on('change', function () {

                validateProduct();
            });

            function validateProduct() {
                const productId = $("#productSelect").val();
                if (productId === "" || productId === null) {
                    $("#productError").text(productRequiredMessage);
                } else {
                    $("#productError").text("");
                }
            }

            $("#Count").on('keydown', function (e) {
                if (e.key === 'e' || e.key === 'E') {
                    e.preventDefault();
                }
            });

            function validateCount() {
                const count = $("#Count").val().trim();
                if (count.length === 0) {
                    $("#countError").text(countRequiredMessage);
                } else if (parseFloat(count) < 0) {
                    $("#countError").text(countPositiveMessage);
                } else if (!Number.isInteger(Number(count))) {
                    $("#countError").text(countWholeNumberMessage);
                } else {
                    $("#countError").text("");
                }
            }


            $("#Count").on('keyup blur', validateCount);


            $("#stockForm").submit(function (event) {

                validateProduct();
                validateCount();


                if ($("#productError").text() || $("#countError").text()) {
                    event.preventDefault();
                }
            });
        });


    </script>


}
