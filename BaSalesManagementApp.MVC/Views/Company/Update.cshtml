@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer
@model BaSalesManagementApp.MVC.Models.CompanyVMs.CompanyUpdateVM

@{
    ViewData["Title"] = @localizer["Update"];
}
<link href="~/assets/flags/flags.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.min.css" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["Company"] /</span> @localizer["Update"]
        </h4>
        <div class="row">
            <div class="content-wrapper">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <form asp-action="Update" id="companyForm" onsubmit="return validateForm();">
                                <input hidden asp-for="Id" class="form-control" />
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                                <div class="mb-3">
                                    <label asp-for="Name" class="form-label">@localizer["CompanyName"].ToString().ToUpper(new System.Globalization.CultureInfo("tr-TR"))</label>
                                    <input asp-for="Name" id="CompanyName" class="form-control"
                                           data-val="true"
                                           data-val-required="@localizer[Messages.COMPANY_NAME_NOT_EMPTY]"
                                           data-val-minlength="@localizer[Messages.COMPANY_NAME_MINIMUM_LENGTH]"
                                           data-val-maxlength="@localizer[Messages.COMPANY_NAME_MAXIMUM_LENGTH]" />
                                    <span asp-validation-for="Name" id="companyNameError" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="CountryId" name="CountryId" class="form-label">@Html.Raw(localizer["Country"])</label>
                                    <select asp-for="CountryId" class="form-control" id="CountryId" style="width: 100%;">
                                        <!-- Genişlik ayarı -->
                                        @if (Model != null && Model.Countries != null && Model.Countries.Any())
                                        {
                                            <option value="">@Html.Raw(localizer["SelectCountry"])</option>
                                            foreach (var country in Model.Countries)
                                            {
                                                <option value="@country.Id">@country.Name</option>
                                            }
                                        }
                                        else
                                        {
                                            <option value="" disabled selected>@Html.Raw(localizer["NoCountryFound"])</option>
                                        }
                                    </select>
                                    <span asp-validation-for="CountryId" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="CityId" name="CityId" class="form-label">@Html.Raw(localizer["City"])</label>
                                    <select asp-for="CityId" class="form-control" id="CityId" style="width: 100%;">
                                        <!-- Genişlik ayarı -->
                                        @if (Model != null && Model.Cities != null && Model.Cities.Any())
                                        {
                                            <option value="">@Html.Raw(localizer["SelectCity"])</option>
                                            foreach (var city in Model.Cities)
                                            {
                                                <option value="@city.Id">@city.Name</option>
                                            }
                                        }
                                        else
                                        {
                                            <option value="" disabled selected>@Html.Raw(localizer["NoCityFound"])</option>
                                        }
                                    </select>
                                    <span asp-validation-for="CityId" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="Address" class="form-label">@Html.Raw(localizer["Address"])</label>
                                    <input asp-for="Address" id="Address" class="form-control" data-val="true"
                                           data-val-required="@localizer[Messages.COMPANY_ADDRESS_NOT_EMPTY]"
                                           data-val-minlength="@localizer[Messages.COMPANY_ADDRESS_MINIMUM_LENGTH]"
                                           data-val-maxlength="@localizer[Messages.COMPANY_ADDRESS_MAXIMUM_LENGTH]" />
                                    <span asp-validation-for="Address" id="addressError" class="text-danger"></span>

                                </div>
                                <div class="mb-3">
                                    <label asp-for="Phone" class="form-label">@Html.Raw(localizer["Phone"])</label>
                                    <br />
                                    <input asp-for="Phone" type="tel" class="form-control" id="phoneInput" autocomplete="tel" />
                                    <span asp-validation-for="Phone" class="text-danger"></span>
                                    <input type="hidden" id="fullPhoneNumber" name="fullPhoneNumber" />
                                    <input type="hidden" id="selectedCountryIso2" name="selectedCountryIso2" />
                                    <input type="hidden" id="countryDialCode" name="CountryCode" asp-for="CountryCode" />
                                </div>
                                <div>
                                    <input type="submit" value="@localizer["Update"]" class="btn btn-primary" />
                                    <a asp-action="Index" class="btn btn-secondary">@localizer["BackToList"]</a>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
<!-- Toastr JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<!-- intl-tel-input JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<script>
    // Company Name Validation
    $('#CompanyName').on('input', function () {
        var companyNameValue = $(this).val();
        var errorMessage = $('#companyNameError');

        var requiredMessage = $(this).data('val-required');
        var minLengthMessage = $(this).data('val-minlength');
        var maxLengthMessage = $(this).data('val-maxlength');

        if (companyNameValue.length === 0) {
            errorMessage.text(requiredMessage).show();
        }
        else if (companyNameValue.length < 2) {
            errorMessage.text(minLengthMessage).show();
        }
        else if (companyNameValue.length > 128) {
            errorMessage.text(maxLengthMessage).show();
        }
        else {
            errorMessage.text('').hide();
        }

    });
    $(document).ready(function () {


        $('#Address').on('input', function () {
            var addressValue = $(this).val();
            var addressErrorMessage = $('#addressError');

            // Her kelimenin baş harfini büyük yapma, Türkçe karakter desteği eklendi...
            addressValue = addressValue.replace(/(^|\s)(\S)/g, function (match, p1, p2) {
                return p1 + p2.toLocaleUpperCase('tr-TR');
            });

            $(this).val(addressValue);

            // İlgili validasyon mesajlarını Razor'daki data-val-* özelliklerinden alıyoruz
            var addressRequiredMessage = $('#Address').data('val-required');
            var addressLengthMessage = $('#Address').data('val-length');

            // Eğer adres boşsa required mesajını göster
            if (addressValue.length === 0) {
                addressErrorMessage.text(addressRequiredMessage);
                addressErrorMessage.css('display', 'block');
            }
            // Eğer adres 5 ile 200 karakter arasında değilse length mesajını göster
            else if (addressValue.length < 5 || addressValue.length > 200) {
                addressErrorMessage.text(addressLengthMessage);
                addressErrorMessage.css('display', 'block');
            } else {
                // Hata yoksa mesajı temizle ve gizle
                addressErrorMessage.text('');
                addressErrorMessage.css('display', 'none');
            }
        });

        // Select2 initialization
        $('#CountryId').select2({
            placeholder: '@Html.Raw(localizer["SelectCountry"])',
            allowClear: false,
            matcher: function (params, data) {
                // Arama terimi yoksa, mevcut seçenekleri göster
                if ($.trim(params.term) === '') {
                    return data;
                }

                // Veri boşsa, eşleşme yok demektir
                if (typeof data.text === 'undefined') {
                    return null;
                }

                // Arama terimini küçük harflere çevir ve baştan eşleşme kontrolü yap
                var searchTerm = params.term.toLowerCase();
                var optionText = data.text.toLowerCase();

                // Eğer seçenek, arama terimiyle başlıyorsa, sonucu döndür
                if (optionText.indexOf(searchTerm) === 0) {
                    return data;
                }

                // Aksi takdirde eşleşme yok
                return null;
            },
            sorter: function (data) {
                // Alfabetik sıralama
                return data.sort(function (a, b) {
                    return a.text.localeCompare(b.text);
                });
            }
        });

        $('#CityId').select2({
            placeholder: '@Html.Raw(localizer["SelectCity"])',
            allowClear: false,
            matcher: function (params, data) {
                // Arama terimi yoksa, mevcut seçenekleri göster
                if ($.trim(params.term) === '') {
                    return data;
                }

                // Veri boşsa, eşleşme yok demektir
                if (typeof data.text === 'undefined') {
                    return null;
                }

                // Arama terimini küçük harflere çevir ve baştan eşleşme kontrolü yap
                var searchTerm = params.term.toLowerCase();
                var optionText = data.text.toLowerCase();

                // Eğer seçenek, arama terimiyle başlıyorsa, sonucu döndür
                if (optionText.indexOf(searchTerm) === 0) {
                    return data;
                }

                // Aksi takdirde eşleşme yok
                return null;
            },
            sorter: function (data) {
                // Alfabetik sıralama
                return data.sort(function (a, b) {
                    return a.text.localeCompare(b.text);
                });
            }
        });


        var iti = intlTelInput($('#phoneInput')[0], {
            separateDialCode: true,
            initialCountry: 'auto',
            utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
        });

        // Toastr options
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-bottom-right",
            "preventDuplicates": true,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };


        var countryPhoneData;
        $.getJSON('/data/NewCountries.json', function (data) {
            countryPhoneData = data.CountryCodes;

            initializePhoneNumber('@Model.Phone', '@Model.CountryId');
        });

        function initializePhoneNumber(initialPhoneNumber, countryId) {
            if (initialPhoneNumber) {
                var selectedCountryName = $('#CountryId').find('option:selected').text();
                var selectedCountryPhoneCode = getCountryPhoneCode(selectedCountryName);
                var fullPhoneNumber = selectedCountryPhoneCode + initialPhoneNumber;
                iti.setNumber(fullPhoneNumber);
            } else {

                if (countryId) {
                    $('#CountryId').val(countryId).trigger('change');
                }
            }
        }

        function getCountryPhoneCode(countryName) {
            var selectedCountryPhoneCode = null;
            $.each(countryPhoneData, function (index, country) {
                if (country.name.toLowerCase() === countryName.toLowerCase() || country.turkish_name.toLowerCase() === countryName.toLowerCase()) {
                    selectedCountryPhoneCode = country.dialcode;
                    return false;
                }
            });
            return selectedCountryPhoneCode;
        }


        var companyCountryId = '@Model.CountryId';
        var companyCityId = '@Model.CityId';

        if (companyCountryId) {

            $('#CountryId').val(companyCountryId).trigger('change');

            $('#CountryId').on('select2:select', function () {
                loadCities(companyCountryId, companyCityId);
            });
        }

        if (companyCountryId) {
            loadCities(companyCountryId, companyCityId);
        }

        // Ülke değiştirilince şehirlere göre dropdown'ı güncelle
        $('#CountryId').change(function () {
            var selectedCountryId = $(this).val();
            var citySelect = $('#CityId');

            if (selectedCountryId) {
                loadCities(selectedCountryId); // Seçilen ülkeye göre şehirleri yükle
            } else {
                $('#CityId').empty().append(new Option('@localizer["SelectCity"]', ''));
            }

            // Seçilen ülkenin telefon kodunu güncelle
            var selectedCountryName = $(this).find('option:selected').text();
            var countryPhoneCode = getCountryPhoneCode(selectedCountryName);
            iti.setNumber(countryPhoneCode); // intl-tel-input'u güncelle
        });

        $('#CountryId').change(function () {
            var selectedCountryId = $(this).val();
            var citySelect = $('#CityId');

            // Seçili ülkenin şehri var mı kontrol et
            if (selectedCountryId) {
                // Şehir dropdown'ını sıfırlama
                citySelect.empty().append(new Option('@localizer["SelectCity"]', '')); // Varsayılan seçenek
                loadCities(selectedCountryId, companyCityId) // Seçilen ülkeye göre şehirleri yükle
            } else {
                // Ülke seçimi yoksa şehir dropdown'ını temizle
                citySelect.empty().append(new Option('@localizer["SelectCity"]', ''));
            }

            // Seçilen ülkenin telefon kodunu güncelle
            var selectedCountryName = $(this).find('option:selected').text();
            var countryPhoneCode = getCountryPhoneCode(selectedCountryName);
            iti.setNumber(countryPhoneCode); // intl-tel-input'u güncelle
        });

        // Şehirleri yükleyen fonksiyon
        function loadCities(countryId, selectedCityId = null) {
            $.ajax({
                url: '@Url.Action("GetCitiesByCountryId", "Company")',
                type: 'GET',
                data: { countryId: countryId },
                success: function (response) {
                    var citySelect = $('#CityId');
                    citySelect.empty(); // Önceki şehirleri temizle
                    citySelect.append(new Option('@localizer["SelectCity"]', '')); // Varsayılan seçenek

                    // Eğer şehirler geldiyse dropdown'a ekle
                    if (response && response.length > 0) {
                        response.forEach(function (city) {
                            citySelect.append(new Option(city.name, city.id));
                        });

                        // Eğer modelden gelen bir şehir varsa onu seç
                        if (selectedCityId) {
                            citySelect.val(selectedCityId);
                        }
                    } else {
                        citySelect.append(new Option('@localizer["NoCityFound"]', '', true, true));
                    }
                },
                error: function () {
                    toastr.error('@localizer["AnErrorOccurred"]', 'Hata');
                }
            });
        }

        // Form submit handler
        $('#companyForm').on('submit', function (e) {
            var isValid = iti.isValidNumber();
            const countryData = iti.getSelectedCountryData();
            var fullPhoneNumber = iti.getNumber(); // Ülke kodu ile birlikte tam telefon numarası

            if (!isValid) {
                e.preventDefault();  // Form gönderimini durdur
                toastr.error('@localizer["Phone_Number_Error"]', '@localizer["Phone_Error"]');
                return;
            }

            // JSON verisinden seçili ülkenin dialcode değerini bul
            // let selectedCountryDialCode = getCountryPhoneCode(countryData.iso2.toUpperCase());
            let selectedCountryDialCode = null;
            $.each(countryPhoneData, function (index, country) {
                if (country.code === countryData.iso2.toUpperCase()) {
                    selectedCountryDialCode = country.dialcode; // dialcode değerini al
                    return false; // Döngüyü durdur
                }
            });
            // Form gönderilmeden önce telefon ve ülke bilgilerini gizli inputlara yerleştir
            $('#fullPhoneNumber').val(fullPhoneNumber);  // Tam telefon numarasını gizli inputa yerleştir
            $('#selectedCountryIso2').val(countryData.iso2);  // ISO2 ülke kodu
            $('#countryDialCode').val(selectedCountryDialCode);  // Dial kod
        });

    });

    // Form validation before submission
    function validateForm() {
        var companyNameError = $('#companyNameError').text();
        var addressError = $('#addressError').text();
        var phoneError = $('#phoneError').text();

        if (companyNameError || addressError || phoneError) {
            return false;  // Form gönderimini engelle
        }
        return true;  // Formu gönder
    }
</script>
