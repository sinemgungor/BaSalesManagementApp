@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer
@model BaSalesManagementApp.MVC.Models.PromotionVMs.PromotionCreateVM

@{
    ViewData["Title"] = localizer["Create"];
}


<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["Promotion"] /</span> @localizer["Create"]
        </h4>

        <div class="row">
            <div class="content-wrapper">
                <div class="col-md-6 col-lg-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <form id="createPromotionForm" asp-action="Create">
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="mb-3">
                                    <label asp-for="Discount" class="form-label">@localizer["Discount"] (%)</label>
                                    <input id="Discount" asp-for="Discount" class="form-control" min="1" max="99" />
                                    <span id="discountError" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="Price" class="form-label">@localizer["Price"]</label>
                                    <input id="Price" asp-for="Price" class="form-control"  />
                                    <span id="priceError" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="TotalPrice" class="form-label">@localizer["TotalPrice"]</label>
                                    <input id="TotalPrice" asp-for="TotalPrice" class="form-control"  />
                                    <span id="totalPriceError" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="IsActive" class="form-check-label">@localizer["Active"]</label>
                                    <input asp-for="IsActive" class="form-check-input" />
                                </div>
                                <div class="mb-3">
                                    <label asp-for="StartDate" class="form-label">@localizer["StartDate"]</label>
                                    <input asp-for="StartDate" id="StartDate" type="date" class="form-control" value="@Model.StartDate.ToString(DateTime.Now.ToString("yyyy-MM-dd"))" />
                                    <span id="startDateError" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="EndDate" class="form-label">@localizer["EndDate"]</label>
                                    <input asp-for="EndDate" id="EndDate" type="date" class="form-control" value="@Model.EndDate.ToString(DateTime.Now.ToString("yyyy-MM-dd"))" />
                                    <span id="endDateError" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="CompanyId" class="form-label">@localizer["Company"]</label>
                                    <select id="CompanyId" class="form-control select2" asp-for="CompanyId" data-placeholder="@localizer["Select_Company"]" style="width: 100%;">
                                        <option></option>
                                        @if (Model != null && Model.Companies != null && Model.Companies.Any())
                                        {
                                            @foreach (var company in Model.Companies)
                                            {
                                                <option value="@company.Id">@company.Name</option>
                                            }
                                        }
                                    </select>
                                    <span id="companyError" class="text-danger"></span>
                                </div>
                                <div class="mb-3">
                                    <label asp-for="ProductId" class="form-label">@localizer["Product"]</label>
                                    <select id="ProductId" class="form-control select2" asp-for="ProductId" data-placeholder="@localizer["Select_a_Product"]" disabled style="width: 100%;">
                                        <option></option>
                                        <!-- Ürünler, seçilen şirkete göre dinamik olarak yüklenecek -->
                                    </select>
                                    <span id="productError" class="text-danger"></span>
                                </div>


                                <div>
                                    <input type="submit" value="@localizer["Create"]" class="btn btn-primary" />
                                    <a asp-action="Index" class="btn btn-secondary">@localizer["BackToList"]</a>
                                </div>
                                @for (int i = 0; i < Model.Companies.Count(); i++)
                                {
                                    <input type="hidden" name="Companies[@i].Id" value="@Model.Companies.ElementAt(i).Id" />
                                    <input type="hidden" name="Companies[@i].Name" value="@Model.Companies.ElementAt(i).Name" />
                                }
                                @for (int i = 0; i < Model.Products.Count(); i++)
                                {
                                    <input type="hidden" name="Products[@i].Id" value="@Model.Products.ElementAt(i).Id" />
                                    <input type="hidden" name="Products[@i].Name" value="@Model.Products.ElementAt(i).Name" />
                                }
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
<script>
    $(document).ready(function () {
        console.log("Sayfa tamamen yüklendi"); // Sayfa tamamen yüklendiğinde bu log görünecek

        // Şirket dropdown'ı için Select2 başlatma
        if ($('#CompanyId').length) {
            console.log("CompanyId bulundu, Select2 başlatılıyor");
            $('#CompanyId').select2({
                placeholder: 'Select Company',
                allowClear: true,
                 width: 'resolve', // width: 'resolve' ekleyerek genişlik sorununu çözdük.
                sorter: function (data) {
                    return data.sort(function (a, b) {
                        return a.text.localeCompare(b.text);
                    });
                },
                 language: {
                    noResults: function () {
                        return '@Html.Raw(localizer["No matching results"])'; // Burada uygun localizer anahtarını kullanın
                    }
                },
                matcher: function (params, data) {
                    if ($.trim(params.term) === '') {
                        return data;
                    }
                    var searchTerm = params.term.toLowerCase();
                    var optionText = data.text.toLowerCase();
                    if (optionText.startsWith(searchTerm)) {
                        return data;
                    }
                    return null;
                }
            });
        } else {
            console.log("CompanyId bulunamadı, Select2 başlatılamıyor.");
        }
         $('#ProductId').select2({
                placeholder: '@Html.Raw(localizer["Select_a_Product"])',
                allowClear: true,
                width: 'resolve',
                matcher: function (params, data) {
                    // Eğer arama yapmıyorsanız, mevcut öğeleri göster
                    if ($.trim(params.term) === '') {
                        return data;
                    }

                    // "a" ile başlayan öğeleri filtrele
                    if (data.text.toLowerCase().startsWith(params.term.toLowerCase())) {
                        return data;
                    }

                    // Eşleşmiyorsa null döndür
                    return null;
                },
                sorter: function (data) {
                    // Alfabetik sıralama
                    return data.sort(function (a, b) {
                        return a.text.localeCompare(b.text);
                    });
                },
                language: {
                    noResults: function () {
                        return '@Html.Raw(localizer["No matching results"])'; // Burada uygun localizer anahtarını kullanın
                    }
                }
            });



         /// Şirket seçildiğinde ürün dropdown'ını güncelle
        $('#CompanyId').on('change', function () {
            var companyId = $(this).val();

            if (companyId) {
                // Ajax ile seçilen şirkete göre ürünleri getir
                $.ajax({
                    url: '@Url.Action("GetProductsByCompanyId", "Promotion")' + '/' + companyId,
                    type: 'GET',
                    data: { companyId: companyId },
                    success: function (data) {
                        var $productDropdown = $('#ProductId');
                        $productDropdown.empty();
                        $productDropdown.append('<option value="">Select a product</option>'); // Default boş seçenek

                        // Gelen ürünleri ekle
                        $.each(data, function (index, product) {
                            $productDropdown.append('<option value="' + product.id + '" data-price="' + product.price + '">' + product.name + '</option>');
                        });

                        // Dropdown'u aktif hale getir ve değişiklikleri yansıt
                        $productDropdown.prop('disabled', false);
                        $productDropdown.trigger('change');

                        // Ürün seçildiğinde fiyat hesaplama
                        $('#ProductId').on('change', function () {
                            var selectedProduct = $(this).find('option:selected'); // Seçilen ürünü al
                            var price = parseFloat(selectedProduct.data('price')) || 0; // Fiyatı çek
                            var discount = parseFloat($('#Discount').val()) || 0; // İndirimi al
                            console.log("Ürün seçildi, fiyat: " + price + ", indirim: " + discount);

                            // Ürün fiyatını ekrandaki #Price input'una yazdır
                            $('#Price').val(price.toFixed(2)); // Fiyatı ekranda göster

                            // İndirimi uygula ve toplam fiyatı hesapla
                            var totalPrice = price - (price * (discount / 100));
                            console.log("Toplam fiyat: " + totalPrice);

                            // Toplam fiyatı göster
                            $('#TotalPrice').val(totalPrice.toFixed(2));
                        });

                        // İndirim oranı değiştiğinde toplam fiyatı güncelle
                        $('#Discount').on('input', function () {
                            var selectedProduct = $('#ProductId').find('option:selected'); // Seçili ürünü tekrar bul
                            var price = parseFloat(selectedProduct.data('price')) || 0; // Fiyatı tekrar al
                            var discount = parseFloat($(this).val()) || 0; // Yeni indirimi al
                            console.log("İndirim oranı değişti, fiyat: " + price + ", yeni indirim: " + discount);

                            // İndirimi uygula ve toplam fiyatı hesapla
                            var totalPrice = price - (price * (discount / 100));
                            console.log("Güncellenmiş toplam fiyat: " + totalPrice);

                            // Toplam fiyatı göster
                            $('#TotalPrice').val(totalPrice.toFixed(2));
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('Error: ' + error);
                        console.error('Status: ' + status);
                        console.dir(xhr);
                    }
                });
            } else {
                $('#ProductId').val(null).trigger('change');
            }
        });

    
            //HATA MESAJLARI
            //Discount alanı
            var discountRequiredMessage = @Json.Serialize(localizer[Messages.PROMOTION_DISCOUNT_REQUIRED].Value);
            var discountMinRangeMessage = @Json.Serialize(localizer[Messages.PROMOTION_DISCOUNT_GREATER_THAN_ZERO].Value);
            var discountMaxRangeMessage = @Json.Serialize(localizer[Messages.PROMOTION_DISCOUNT_LESS_THAN_HUNDRED].Value);

            //Price Alanı
            var priceRequiredMessage = @Json.Serialize(localizer[Messages.PROMOTION_PRICE_REQUIRED].Value);
            var priceMinRangeMessage = @Json.Serialize(localizer[Messages.ORDER_TOTALPRICE_VALIDATION].Value);


            //TotalPrice Alanı
            var totalPriceRequiredMessage = @Json.Serialize(localizer[Messages.PROMOTION_TOTAL_PRICE_REQUIRED].Value);
            var totalPriceMinRangeMessage = @Json.Serialize(localizer[Messages.PROMOTION_TOTAL_PRICE_GREATER_THAN_ZERO].Value);
            var totalPriceFormatMessage = @Json.Serialize(localizer[Messages.PROMOTION_TOTAL_PRICE_GREATER_THAN_OR_EQUAL_PRICE].Value);


            //StartDate Alanı
            var startDateRequiredMessage = @Json.Serialize(localizer[Messages.PROMOTION_START_DATE_REQUIRED].Value);
            var startDateInvalidMessage = @Json.Serialize(localizer[Messages.PROMOTION_START_DATE_GREATER_THAN_TODAY].Value);
            var startDateBeforeEndDateMessage = @Json.Serialize(localizer[Messages.PROMOTION_START_DATE_LESS_THAN_END_DATE].Value);


            //EndDate Alanı
            var endDateRequiredMessage = @Json.Serialize(localizer[Messages.PROMOTION_END_DATE_REQUIRED].Value);
            var endDateInvalidMessage = @Json.Serialize(localizer[Messages.PROMOTION_END_DATE_GREATER_THAN_START_DATE].Value);

            //Company Alanı
            var companyRequiredMessage = @Json.Serialize(localizer[Messages.PROMOTION_COMPANY_RELATION].Value);

            //Product Alanı
            var productRequiredMessage = @Json.Serialize(localizer[Messages.PROMOTION_PRODUCT_RELATION].Value);




            function validateDiscount() {
                const discount = $("#Discount").val().trim();

                if (discount.length === 0) {
                    $("#discountError").text(discountRequiredMessage);
                } else if (discount <= 0) {
                    $("#discountError").text(discountMinRangeMessage);
                } else if (discount > 100) {
                    $("#discountError").text(discountMaxRangeMessage);
                } else {
                    $("#discountError").text(""); // Hata yok
                }
            }

            function validatePrice() {
                const price = $("#Price").val().trim();

                if (price.length === 0) {
                    $("#priceError").text(priceRequiredMessage);
                } else if (price <= 0) {
                    $("#priceError").text(priceMinRangeMessage);
                } else {
                    $("#priceError").text(""); // Hata yok
                }
            }

            function validateTotalPrice() {
                // const totalPrice = $("#TotalPrice").val().trim();
                // const price = $("#Price").val().trim();

                const totalPrice = parseFloat($("#TotalPrice").val().trim());
                const price = parseFloat($("#Price").val().trim());

                if (isNaN(totalPrice)) {
                    $("#totalPriceError").text(totalPriceRequiredMessage);
                } else if (totalPrice <= 0) {
                    $("#totalPriceError").text(totalPriceMinRangeMessage);
                } else if (totalPrice > price) {
                    $("#totalPriceError").text(totalPriceFormatMessage);
                } else {
                    $("#totalPriceError").text(""); // Hata yok
                }
            }

            function validateStartDate() {
                const startDate = $("#StartDate").val().trim();
                const endDate = $("#EndDate").val().trim(); // EndDate değerini al

                if (startDate.length === 0) {
                    $("#startDateError").text(startDateRequiredMessage);
                } else if (new Date(startDate) < new Date()) {
                    $("#startDateError").text(startDateInvalidMessage);
                } else if (endDate.length > 0 && new Date(startDate) >= new Date(endDate)) {
                    // Eğer EndDate doluysa ve StartDate, EndDate'den sonra veya eşitse
                    $("#startDateError").text(startDateBeforeEndDateMessage);
                } else {
                    $("#startDateError").text(""); // Hata yok
                }
            }

            function validateEndDate() {
                const endDate = $("#EndDate").val().trim();
                const startDate = $("#StartDate").val().trim();

                if (endDate.length === 0) {
                    $("#endDateError").text(endDateRequiredMessage);
                } else if (new Date(endDate) <= new Date(startDate)) {
                    $("#endDateError").text(endDateInvalidMessage);
                } else {
                    $("#endDateError").text(""); // Hata yok
                }
            }

            function validateCompany() {
                const companyId = $("#CompanyId").val();
                if (companyId === "") {
                    $("#companyError").text(companyRequiredMessage);
                } else {
                    $("#companyError").text("");// Hata mesajını temizle
                }
            }
            // Şirket seçildiğinde otomatik olarak hata mesajını temizlemek için 'change' event'i ekleyelim
            $("#CompanyId").change(function () {
                validateCompany();
            });

            function validateProduct() {
                const productId = $("#ProductId").val();
                if (productId === "") {
                    $("#productError").text(productRequiredMessage);
                } else {
                    $("#productError").text("");
                }
            }

            $("#Discount").on('keyup blur', validateDiscount);
            $("#Price").on('keyup blur', validatePrice);
            $("#TotalPrice").on('keyup blur', validateTotalPrice);
            $("#StartDate").on('keyup blur', validateStartDate);
            $("#EndDate").on('keyup blur', validateEndDate);
            $("#CompanyId").on('keyup blur', validateCompany);
            $("#ProductId").on('change', validateProduct);

            $("#createPromotionForm").submit(function (event) {
                validateDiscount();
                validatePrice();
                validateTotalPrice();
                validateStartDate();
                validateEndDate();
                validateCompany();
                validateProduct();

                let isValid = true;

                if ($("#discountError").text() || $("#priceError").text() || $("#totalPriceError").text() || $("#startDateError").text() || $("#endDateError").text() || $("#companyError").text() || $("#productError").text()) {
                    isValid = false;
                }

                if (!isValid) {
                    event.preventDefault();
                }
            });


    
    });

</script>

@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



