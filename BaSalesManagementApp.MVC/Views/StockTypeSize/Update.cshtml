@model StockTypeSizeUpdateVM
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer

@{
    ViewData["Title"] = localizer["Update"];
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["StockTypeSize"] /</span>
            @localizer["Update"]
        </h4>
        <div class="row">
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="stockTypeSizeForm" asp-action="Update" method="post" novalidate>
                            <input hidden asp-for="Id" class="form-control" />

                            
                            <div class="mb-3">
                                <label asp-for="Size" class="form-label">@localizer["Size"]</label>
                                <input asp-for="Size" class="form-control" id="Size" />
                                <span class="text-danger" id="sizeError"></span>
                            </div>

                            
                            <div class="mb-3">
                                <label asp-for="Description" class="form-label">@localizer["Description"]</label>
                                <input asp-for="Description" class="form-control" id="Description" />
                                <span class="text-danger" id="descriptionError"></span>
                            </div>

                            
                            <div class="mb-3">
                                <label asp-for="StockTypeId" class="form-label">@localizer["ProductType"]</label>
                                <select asp-for="StockTypeId" class="form-control" id="ProductTypeSelect" style="width: 100%;">
                                    <option value="">@localizer["Select_ProductType"]</option>
                                    @foreach (var productType in Model.StockTypes)
                                    {
                                        <option value="@productType.Id">@productType.Name</option>
                                    }
                                </select>
                                <span class="text-danger" id="productTypeError"></span>
                            </div>

                            <div>
                                <input type="submit" value="@localizer["Update"]" class="btn btn-primary" />
                                <a asp-action="Index" class="btn btn-secondary">@localizer["BackToList"]</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

    <script>
        var sizeNotEmptyMessage = @Json.Serialize(localizer[Messages.STOCK_TYPE_SIZE_NOT_EMPTY].Value);
        var sizeMaxLengthMessage = @Json.Serialize(localizer[Messages.STOCK_TYPE_SIZE_MAX_LENGTH].Value);

        var descriptionNotEmptyMessage = @Json.Serialize(localizer[Messages.STOCK_TYPE_SIZE_DESCRIPTION_NOT_EMPTY].Value);
        var descriptionMaxLengthMessage = @Json.Serialize(localizer[Messages.STOCK_TYPE_SIZE_DESCRIPTION_MAX_LENGTH].Value);
        var descriptionMinLengthMessage = @Json.Serialize(localizer[Messages.STOCK_TYPE_SIZE_DESCRIPTION_MIN_LENGTH].Value);

        var productTypeRequiredMessage = @Json.Serialize(localizer[Messages.PRODUCTTYPE_RELATION_ERROR].Value);

        $(document).ready(function () {

            $('#ProductTypeSelect').select2({
                placeholder: '@Html.Raw(localizer["Select_ProductType"])',
                allowClear: true,
                width: 'resolve',
                matcher: function (params, data) {
                    if ($.trim(params.term) === '') {
                        return data;
                    }
                    if (typeof data.text === 'undefined') {
                        return null;
                    }
                    var searchTerm = params.term.toLowerCase();
                    var optionText = data.text.toLowerCase();
                    if (optionText.indexOf(searchTerm) === 0) {
                        return data;
                    }
                    return null;
                },
                sorter: function (data) {
                    return data.sort(function (a, b) {
                        return a.text.localeCompare(b.text);
                    });
                }
            }).on('change', function () {
                validateCategory(); 
            });

            
            function validateSize() {
                var size = $('#Size').val().trim();
                if (size.length === 0) {
                    $('#sizeError').text(sizeNotEmptyMessage);
                } else if (size.length > 128) {
                    $('#sizeError').text(sizeMaxLengthMessage);
                } else {
                    $('#sizeError').text('');
                }
            }


            function validateDescription() {
                var description = $('#Description').val().trim();
                if (description.length === 0) {
                    $('#descriptionError').text(descriptionNotEmptyMessage);
                } else if (description.length < 2) {
                    $('#descriptionError').text(descriptionMinLengthMessage);
                } else if (description.length > 128) {
                    $('#descriptionError').text(descriptionMaxLengthMessage);
                } else {
                    $('#descriptionError').text('');
                }
            }

            
            function validateCategory() {
                var category = $('#ProductTypeSelect').val();
                if (!category) {
                    $('#productTypeError').text(productTypeRequiredMessage);
                } else {
                    $('#productTypeError').text('');
                }
            }

            
            $('#Size').on('keyup blur', validateSize);
            $('#Description').on('keyup blur', validateDescription);

            
            $('#stockTypeSizeForm').submit(function (event) {
                validateSize();
                validateDescription();
                validateCategory();


                if ($('#sizeError').text() || $('#descriptionError').text() || $('#productTypeError').text()) {
                    event.preventDefault();
                }
            });
        });
    </script>
}
