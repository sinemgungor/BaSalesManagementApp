@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer
@model BaSalesManagementApp.MVC.Models.AdminVMs.AdminUpdateVM
@{
    ViewData["Title"] = localizer["Update"];
    string x = "@";
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["Admin"] /</span> @localizer["Update"]
        </h4>
        <div class="row">
            <div class="content-wrapper">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <form asp-action="Update" method="post" enctype="multipart/form-data" id="adminForm"
                                data-firstname-error="@localizer["First name must be between 2 and 50 characters and cannot contain numbers."]"
                                data-lastname-error="@localizer["Last name must be between 2 and 50 characters and cannot contain numbers."]"
                                data-email-error="@localizer[Messages.ADMIN_INVALID_EMAIL_DOMAIN]"
                                data-photo-error="@localizer[Messages.ADMIN_PHOTO_FORMAT]"
                                data-photo-size-exceeded="@localizer[Messages.ADMIN_PHOTO_SIZE_EXCEEDS_LIMIT]"  
                                data-photo-invalid-type="@localizer[Messages.ADMIN_PHOTO_FORMAT]"
                            >
                                <input type="hidden" asp-for="Id" />

                                <div class="mb-3">
                                    <label asp-for="FirstName" class="form-label">@localizer["FirstName"]</label>
                                    <input asp-for="FirstName" class="form-control" id="FirstNameInput" />
                                    <span id="FirstNameFeedback" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="LastName" class="form-label">@localizer["LastName"]</label>
                                    <input asp-for="LastName" class="form-control" id="LastNameInput" />
                                    <span id="LastNameFeedback" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Email" class="form-label">@localizer["Email"]</label>
                                    <input type="email" asp-for="Email" class="form-control" id="EmailInput" />
                                    <span id="EmailFeedback" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Photo" class="form-label">@localizer["Photo"]</label>

                                    @if (Model.PhotoUrl != null)
                                    {
                                        <img src="@Model.PhotoUrl" alt="Current Photo" class="img-thumbnail mb-2" style="max-width: 200px;" id="CurrentPhotoPreview" />
                                    }

                                   

                                    @if (Model.PhotoUrl != null)
                                    {
                                        <!-- Fotoğraf kaldırma seçeneği -->
                                        <div class="form-check mt-2">
                                            <input asp-for="IsPhotoRemoved" class="form-check-input" type="checkbox" id="RemovePhotoCheckbox" />
                                            <label class="form-check-label" for="RemovePhotoCheckbox">@localizer["Remove_Photo"]</label>
                                        </div>
                                    }
                                    <input asp-for="Photo" type="file" class="form-control" accept=".jpg,.jpeg,.png" id="PhotoInput" />
                                    <span asp-validation-for="Photo" id="PhotoFeedback" class="text-danger"></span>
                                    <img id="PhotoPreview" src="#" alt="Photo Preview" style="display: none; margin-top: 10px; max-width: 200px;" />
                                </div>


                                <button type="submit" class="btn btn-primary">@localizer["Update"]</button>
                                <a asp-action="Index" class="btn btn-secondary">@localizer["BackToList"]</a>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('adminForm');
            const formErrorFeedback = document.getElementById('formErrorFeedback');

            const firstNameError = form.getAttribute('data-firstname-error');
            const lastNameError = form.getAttribute('data-lastname-error');
            const emailError = form.getAttribute('data-email-error');
            const photoSizeExceededMessage = form.getAttribute('data-photo-size-exceeded');
            const photoInvalidFileTypeMessage = form.getAttribute('data-photo-invalid-type');

            const maxFileSize = 500 * 1024;

            // Yardımcı fonksiyonlar
            function setValidationFeedback(elementId, isValid, message) {
                const feedbackElement = document.getElementById(elementId);
                if (isValid) {
                    feedbackElement.innerHTML = '';
                    feedbackElement.classList.remove('text-danger');
                    feedbackElement.classList.add('text-success');
                } else {
                    feedbackElement.innerHTML = message ? ` ${message}` : '';
                    feedbackElement.classList.remove('text-success');
                    feedbackElement.classList.add('text-danger');
                }
            }

            function validateName(value) {
                const nameRegex = /^[^\d]+$/;
                return value.length >= 2 && value.length <= 50 && nameRegex.test(value);
            }

            function validateEmail(value) {
                if (value === null || value.trim() === '') {
                    return false;
                }

                const domainParts = value.split('@x');
                if (domainParts.length !== 2) {
                    return false;
                }

                const domain = domainParts[1];
                const domainPartsArray = domain.split('.');

                if (domainPartsArray.length < 2) {
                    return false;
                }

                for (const part of domainPartsArray) {
                    if (part.length < 1 || part.length > 63) {
                        return false;
                    }
                }

                if (domainPartsArray[domainPartsArray.length - 1].length < 2) {
                    return false;
                }

                const validDomains = new Set(['gmail.com', 'yahoo.com', 'outlook.com', 'bilgeadam.com', 'bilgeadamboost.com', 'hotmail.com']);
                if (!validDomains.has(domain)) {
                    return false;
                }

                return true;
            }

            function validateFileFormat(file) {
                const validFormats = ['image/jpeg', 'image/png'];
                return file && validFormats.includes(file.type);
            }

            function validatePhoto() {
                const photo = document.getElementById('PhotoInput').files[0];
                if (photo) {
                    const fileExtension = photo.name.split('.').pop().toLowerCase();
                    const isFileValid = validateFileFormat(photo);
                    
                    if (photo.size > maxFileSize) {
                        setValidationFeedback('PhotoFeedback', false, photoSizeExceededMessage);
                        return false;
                    } else if (!isFileValid) {
                        setValidationFeedback('PhotoFeedback', false, photoInvalidFileTypeMessage);
                        return false;
                    } else {
                        setValidationFeedback('PhotoFeedback', true, ''); 
                        return true;
                    }
                } else {
                    setValidationFeedback('PhotoFeedback', true, ''); 
                    return true;
                }
            }

            // Fotoğraf önizleme fonksiyonu
            function previewPhoto(photoFile) {
                const photoPreview = document.getElementById('PhotoPreview');
                const currentPhotoPreview = document.getElementById('CurrentPhotoPreview');

                if (photoFile) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        photoPreview.src = e.target.result;
                        photoPreview.style.display = 'block';
                        if (currentPhotoPreview) {
                            currentPhotoPreview.style.display = 'none';
                        }
                    };
                    reader.readAsDataURL(photoFile);
                } else {
                    photoPreview.style.display = 'none';
                    photoPreview.src = '#';
                }
            }

            function validateForm() {
                const isFirstNameValid = validateName(document.getElementById('FirstNameInput').value);
                const isLastNameValid = validateName(document.getElementById('LastNameInput').value);
                const isEmailValid = validateEmail(document.getElementById('EmailInput').value);
                const isPhotoValid = validatePhoto();

                setValidationFeedback('FirstNameFeedback', isFirstNameValid, isFirstNameValid ? '' : firstNameError);
                setValidationFeedback('LastNameFeedback', isLastNameValid, isLastNameValid ? '' : lastNameError);
                setValidationFeedback('EmailFeedback', isEmailValid, isEmailValid ? '' : emailError);

                return isFirstNameValid && isLastNameValid && isEmailValid && isPhotoValid;
            }

            document.getElementById('FirstNameInput').addEventListener('keyup', function () {
                const isValid = validateName(this.value);
                setValidationFeedback('FirstNameFeedback', isValid, isValid ? '' : firstNameError);
            });

            document.getElementById('LastNameInput').addEventListener('keyup', function () {
                const isValid = validateName(this.value);
                setValidationFeedback('LastNameFeedback', isValid, isValid ? '' : lastNameError);
            });

            document.getElementById('EmailInput').addEventListener('keyup', function () {
                const isValid = validateEmail(this.value);
                setValidationFeedback('EmailFeedback', isValid, isValid ? '' : emailError);
            });

            document.getElementById('PhotoInput').addEventListener('change', function () {
                validatePhoto();
                const photoFile = this.files[0];
                previewPhoto(photoFile);
            });

            document.getElementById('RemovePhotoCheckbox').addEventListener('change', function () {
                const currentPhotoPreview = document.getElementById('CurrentPhotoPreview');
                if (this.checked) {
                    if (currentPhotoPreview) {
                        currentPhotoPreview.style.display = 'none';
                    }
                } else {
                    if (currentPhotoPreview) {
                        currentPhotoPreview.style.display = 'block';
                    }
                }
            });

            form.addEventListener('submit', function (event) {
                if (!validateForm()) {
                    event.preventDefault(); 
                    formErrorFeedback.innerHTML = '@localizer["Please fix the validation errors before submitting."]';
                    formErrorFeedback.style.display = 'block'; 
                } else {
                    formErrorFeedback.style.display = 'none'; 
                }
            });
        });
    </script>
}
