@model IPagedList<ProductListVM>
@using BaSalesManagementApp.Business.Utilities
@using BaSalesManagementApp.MVC.Models.ProductVMs
@using Microsoft.Extensions.Localization
@using X.PagedList.Mvc.Common
@using X.PagedList.Mvc.Core
@using X.PagedList
@using X.PagedList.Mvc.Core.Common
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer


@{
    ViewData["Title"] = localizer["Index"];
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        @*  <h4 class="py-3 mb-4"><span class="text-muted fw-light">@localizer["Product"]</span>List</h4> *@
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["Product"] /</span>
            @localizer["List"]
        </h4>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <a asp-action="Create" class="btn btn-primary">@localizer["Create_New"]</a>

            <div class="d-flex">
                <!-- Show Entries Dropdown Sol Tarafa Alınıyor -->
                <form method="get" asp-action="Index" class="d-inline-block me-3">
                    <label>@localizer["Show"]</label>
                    <select name="pageSize" onchange="this.form.submit()" class="form-select d-inline-block w-auto ms-2">
                        @if (ViewData["CurrentPageSize"]?.ToString() == "5")
                        {
                            <option value="5" selected>5</option>
                        }
                        else
                        {
                            <option value="5">5</option>
                        }

                        @if (ViewData["CurrentPageSize"]?.ToString() == "10")
                        {
                            <option value="10" selected>10</option>
                        }
                        else
                        {
                            <option value="10">10</option>
                        }

                        @if (ViewData["CurrentPageSize"]?.ToString() == "20")
                        {
                            <option value="20" selected>20</option>
                        }
                        else
                        {
                            <option value="20">20</option>
                        }

                        @if (ViewData["CurrentPageSize"]?.ToString() == "50")
                        {
                            <option value="50" selected>50</option>
                        }
                        else
                        {
                            <option value="50">50</option>
                        }
                    </select>
                    <label>@localizer["Entries"]</label>
                </form>

                <div id="sortOrder" class="dropdown">
                    <button class="btn btn-primary" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="bi bi-filter" style="font-size:1rem"></i>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a class="dropdown-item" data-value="alphabetical" href="#">A-Z</a>
                        <a class="dropdown-item" data-value="alphabeticaldesc" href="#">Z-A</a>
                        <a class="dropdown-item" data-value="date" href="#">@localizer["Newest_First"]</a>
                        <a class="dropdown-item" data-value="datedesc" href="#">@localizer["Oldest_First"]</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="table-responsive text-nowrap">
                <table class="table">
                    <thead>
                        <tr>
                            <th>@localizer["ColumnName"]</th>
                            <th>@localizer["Price"].ToString().ToUpper(new System.Globalization.CultureInfo(System.Threading.Thread.CurrentThread.CurrentCulture.Name))</th>
                            <th>@localizer["ColumnCategory"].ToString().ToUpper(new System.Globalization.CultureInfo("tr-TR"))</th>
                            <th>@localizer["ColumnCompany"].ToString().ToUpper(new System.Globalization.CultureInfo("tr-TR"))</th>
                            <th class="text-end">@localizer["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody class="table-border-bottom-0">
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="fw-medium">@StringUtilities.CapitalizeEachWord(item.Name)</td>
                                <td class="fw-medium">@item.Price</td>
                                <td class="fw-medium">@item.CategoryName</td>
                                <td class="fw-medium">
                                    @if (item.CompanyPhoto != null) //Company'nin logosu var ise
                                    {
                                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(item.CompanyPhoto)" alt="Company Picture"
                                                                    class="rounded-circle profile-picture" style="width: 40px; height: 40px;"
                                                                    data-bs-toggle="popover" data-bs-html="true"
                                                                    data-bs-content="
                                        <div class='card' style='width: 150px;'>
                                            <img src='data:image/jpeg;base64,@Convert.ToBase64String(item.CompanyPhoto)' class='card-img-top' alt='Company Logo'>
                                            <div class='card-body text-center'>
                                                <h6 class='card-title'>@item.CompanyName</h6>
                                            </div>
                                        </div>"
                                        />
                                    }
                                    else //Company'nin logosu yok ise
                                    {
                                        <span class="rounded-circle" style="width: 40px; height: 40px; background-color: #e7e7ff; color: #696cff; display: flex; justify-content: center; align-items: center; font-weight:500"
                                                                     data-bs-toggle="popover" data-bs-html="true"
                                                                     data-bs-content="
                                                               <div class='card' style='width: 150px;'>
                                             <div class='card-img-top' style='background-color: #e7e7ff; width: 100%; height: 80px; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; color: #696cff;'>
                                        @* @item.CompanyName.Substring(0, 2) *@
                                             </div>
                                             <div class='card-body text-center'>
                                                 <h6 class='card-title'>@item.CompanyName</h6>
                                             </div>
                                         </div>">@item.CompanyName.Substring(0, 2)</span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="dropdown">
                                        <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown" style="margin-right: 28px;">
                                            <i class="bx bx-dots-vertical-rounded"></i>
                                        </button>
                                        <div class="dropdown-menu">
                                            <a asp-action="Details" asp-route-productId="@item.Id" class="dropdown-item"><i class="bx bx-info-circle me-1"></i>@localizer["Details"]</a>
                                            <a asp-action="Update" asp-route-productId="@item.Id" class="dropdown-item"><i class="bx bx-edit-alt me-1"></i>@localizer["Update"]</a>
                                            <a href="javascript:;" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deleteModal" data-product-id="@item.Id"><i class="bx bx-trash me-1"></i>@localizer["Delete"]</a>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-center mt-3">
                @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, pageSize = ViewData["CurrentPageSize"] }), new PagedListRenderOptions
           {
               Display = PagedListDisplayMode.Always,
               UlElementClasses = new[] { "pagination", "justify-content-center" },
               LiElementClasses = new[] { "page-item" },
               PageClasses = new[] { "page-link" },
               LinkToPreviousPageFormat = @localizer["Previous"],
               LinkToNextPageFormat = @localizer["Next"],
               LinkToFirstPageFormat = @localizer["First"],
               LinkToLastPageFormat = @localizer["Last"],
               ContainerDivClasses = new[] { "d-flex", "justify-content-center" }
           })
            </div>
        </div>
    </div>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">@localizer["DELETE_CONFIRM_TITLE_PRODUCT"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="deleteModalMessage">@localizer["DELETE_CONFIRM_PRODUCT"]</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@localizer["CANCEL_PRODUCT"]</button>
                <a id="confirmDeleteButton" href="#" class="btn btn-danger">@localizer["DELETE_PRODUCT"]</a>
                <a id="confirmPassiveButton" href="#" class="btn btn-warning" style="display:none;">@localizer["PASSIVE_PRODUCT"]</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Razor'dan yerelleştirilmiş stringleri URL encoded olarak JavaScript değişkenleri olarak tanımlıyoruz
        var productCannotDeleteMessage = decodeURIComponent("@Uri.EscapeDataString(localizer["PRODUCT_CANNOT_DELETE_IS_IN_ORDER"])");
        var deleteConfirmMessage = decodeURIComponent("@Uri.EscapeDataString(localizer["DELETE_CONFIRM_PRODUCT"])");

        document.addEventListener('DOMContentLoaded', function () {
            var deleteModal = document.getElementById('deleteModal');
            deleteModal.addEventListener('show.bs.modal', async function (event) {
                var button = event.relatedTarget;
                var productId = button.getAttribute('data-product-id');
                var confirmDeleteButton = deleteModal.querySelector('#confirmDeleteButton');
                var confirmPassiveButton = deleteModal.querySelector('#confirmPassiveButton');
                var deleteModalMessage = deleteModal.querySelector('#deleteModalMessage');

                // Ürünün siparişe bağlı olup olmadığını kontrol et
                const response = await fetch('/Product/CheckProductInOrder?productId=' + productId);
                const data = await response.json();

                if (data.isInOrder) {
                    deleteModalMessage.textContent = productCannotDeleteMessage;
                    confirmDeleteButton.style.display = 'none';
                    confirmPassiveButton.style.display = 'inline-block';
                    confirmPassiveButton.href = '/Product/Delete?productId=' + productId;
                } else {
                    deleteModalMessage.textContent = deleteConfirmMessage;
                    confirmDeleteButton.style.display = 'inline-block';
                    confirmPassiveButton.style.display = 'none';
                    confirmDeleteButton.href = '/Product/Delete?productId=' + productId;
                }
            });
            var sortOrderSelect = document.getElementById('sortOrder');
            var sortOrderLinks = sortOrderSelect.querySelectorAll('.dropdown-item');

            function updateSortOrderFromUrl() {
                var urlParams = new URLSearchParams(window.location.search);
                var sortOrder = urlParams.get('sortOrder') || 'alphabetical';
                sortOrderLinks.forEach(function (link) {
                    if (link.getAttribute('data-value') === sortOrder) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
            }

            function updatePageLinks() {
                var selectedSortOrder = document.querySelector('.dropdown-item.active').getAttribute('data-value');

                document.querySelectorAll('.pagination a').forEach(function (link) {
                    var href = link.getAttribute('href');
                    var url = new URL(href, window.location.href);
                    var urlParams = new URLSearchParams(url.search);

                    urlParams.set('sortOrder', selectedSortOrder);
                    url.search = urlParams.toString();

                    link.setAttribute('href', url.toString());
                });
            }

            function handleSortOrderChange(event) {
                var selectedSortOrder = event.target.getAttribute('data-value');
                var urlParams = new URLSearchParams(window.location.search);
                urlParams.set('sortOrder', selectedSortOrder);
                urlParams.set('page', 1);
                window.location.search = urlParams.toString();
            }

            sortOrderLinks.forEach(function (link) {
                link.addEventListener('click', handleSortOrderChange);
            });

            updateSortOrderFromUrl();
            updatePageLinks();
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
            var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl, {
                    trigger: 'hover',
                    placement: 'right'
                })
            })
        });
    </script>
}
