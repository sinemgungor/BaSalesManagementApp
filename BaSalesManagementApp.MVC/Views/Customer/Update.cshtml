@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer
@model BaSalesManagementApp.MVC.Models.CustomerVMs.CustomerUpdateVM

@{
    ViewData["Title"] = localizer["Update"];
}

<link href="~/assets/flags/flags.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.min.css" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@Html.Raw(localizer["Customer"]) /</span> @Html.Raw(localizer["Update"])
        </h4>
        <div class="row">
            <div class="col-md-6 col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form asp-action="Update" id="updateForm">
                            <input type="hidden" asp-for="Id" class="form-control" />
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                            <div class="mb-3">
                                <label asp-for="Name" class="form-label">@Html.Raw(localizer["CustomerName"]).ToString().ToUpper()</label>
                                <input asp-for="Name" class="form-control" />
                                <span asp-validation-for="Name" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="CountryId" class="form-label">@Html.Raw(localizer["Country"])</label>
                                <select asp-for="CountryId" class="form-control" id="CountryId" style="width: 100%;">
                                    @if (Model != null && Model.Countries != null && Model.Countries.Any())

                                    {
                                        <option value="">@Html.Raw(localizer["SelectCountry"])</option>
                                        foreach (var country in Model.Countries)

                                        {
                                            <option value="@country.Id">@country.Name</option>
                                        }

                                    }

                                    else

                                    {
                                        <option value="" disabled selected>@Html.Raw(localizer["NoCountryFound"])</option>
                                    }
                                </select>
                                <span asp-validation-for="CountryId" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="CityId" class="form-label">@Html.Raw(localizer["City"])</label>
                                <select asp-for="CityId" class="form-control" id="CityId" style="width: 100%;">
                                    @if (Model != null && Model.Cities != null && Model.Cities.Any())

                                    {
                                        <option value="">@Html.Raw(localizer["SelectCity"])</option>
                                        foreach (var city in Model.Cities)

                                        {
                                            <option value="@city.Id">@city.Name</option>
                                        }

                                    }

                                    else

                                    {
                                        <option value="" disabled selected>@Html.Raw(localizer["NoCityFound"])</option>
                                    }
                                </select>
                                <span asp-validation-for="CityId" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="Address" class="form-label">@Html.Raw(localizer["Address"])</label>
                                <input asp-for="Address" class="form-control" />
                                <span asp-validation-for="Address" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="Phone" class="form-label">@Html.Raw(localizer["Phone"])</label>
                                <br />
                                <input asp-for="Phone" type="tel" class="form-control" id="phoneInput" autocomplete="tel" />
                                <span asp-validation-for="Phone" class="text-danger"></span>
                                <input type="hidden" id="fullPhoneNumber" name="fullPhoneNumber" />
                                <input type="hidden" id="countryDialCode" name="CountryCode" asp-for="CountryCode" />
                            </div>

                            <div class="mb-3">
                                <label asp-for="CompanyId" class="form-label">@Html.Raw(localizer["Company"])</label>
                                <select asp-for="CompanyId" class="form-control" id="companySelect" style="width:100%">
                                    <option value="">@Html.Raw(localizer["Select_Company"])</option>
                                    @foreach (var company in Model.Companies)

                                    {
                                        <option value="@company.Id">@company.Name</option>
                                    }
                                </select>
                                <span asp-validation-for="CompanyId" class="text-danger"></span>
                            </div>

                            <div>
                                <input type="submit" value="@Html.Raw(localizer["Update"])" class="btn btn-primary" id="submitBtn" />
                                <a asp-action="Index" class="btn btn-secondary">@Html.Raw(localizer["BackToList"])</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<script>
    $(document).ready(function () {
        $('#companySelect').select2({
            placeholder: "@Html.Raw(localizer["Select_Company"])",
            allowClear: true,
            matcher: function (params, data) {
                if ($.trim(params.term) === '') return data;
                if (typeof data.text === 'undefined') return null;
                var searchTerm = params.term.toLowerCase();
                var optionText = data.text.toLowerCase();
                if (optionText.indexOf(searchTerm) === 0) return data;
                return null;
            },
            sorter: function (data) {
                return data.sort(function (a, b) {
                    return a.text.localeCompare(b.text);
                });
            }
        });

        $('#CountryId').select2({
            placeholder: '@Html.Raw(localizer["SelectCountry"])',
            allowClear: true,
            matcher: function (params, data) {
                if ($.trim(params.term) === '') return data;
                if (typeof data.text === 'undefined') return null;
                var searchTerm = params.term.toLowerCase();
                var optionText = data.text.toLowerCase();
                if (optionText.indexOf(searchTerm) === 0) return data;
                return null;
            },
            sorter: function (data) {
                return data.sort(function (a, b) {
                    return a.text.localeCompare(b.text);
                });
            }
        });

        $('#CityId').select2({
            placeholder: '@Html.Raw(localizer["SelectCity"])',
            allowClear: true,
            matcher: function (params, data) {
                if ($.trim(params.term) === '') return data;
                if (typeof data.text === 'undefined') return null;
                var searchTerm = params.term.toLowerCase();
                var optionText = data.text.toLowerCase();
                if (optionText.indexOf(searchTerm) === 0) return data;
                return null;
            },
            sorter: function (data) {
                return data.sort(function (a, b) {
                    return a.text.localeCompare(b.text);
                });
            }
        });

        var phoneInput = $('#phoneInput');
        var iti = intlTelInput(phoneInput[0], {
            separateDialCode: true,
            initialCountry: 'auto',
            preferredCountries: ['us', 'tr'],
            utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
        });

        var countryPhoneData = null;

        // JSON verilerini yükle
        $.getJSON('/data/Countries.json', function (data) {
            countryPhoneData = data.CountryCodes;
            var selectedCountryId = '@Model.CountryId';
            var selectedCityId = '@Model.CityId';
            if (selectedCountryId) {
                $('#CountryId').val(selectedCountryId).trigger('change');
                setPhoneInputCountry(selectedCountryId);
                loadCities(selectedCountryId, selectedCityId); // Şehirleri yükle ve varsayılan şehri seç
            }
            var existingPhoneNumber = '@Model.Phone';
            if (existingPhoneNumber) {
                iti.setNumber(existingPhoneNumber);
            }
        });

        $('#CountryId').change(function () {
            var selectedCountryId = $(this).val();
            setPhoneInputCountry(selectedCountryId);
            loadCities(selectedCountryId);
        });

        function setPhoneInputCountry(selectedCountryId) {
            var selectedCountryName = $('#CountryId option:selected').text().trim().toLowerCase(); // Küçük harfe dönüştürme
            var selectedCountry = countryPhoneData.find(function (country) {
                return country.name.toLowerCase() === selectedCountryName || country.turkish_name.toLowerCase() === selectedCountryName;
            });
            if (selectedCountry) {
                iti.setCountry(selectedCountry.code.toLowerCase());
                $('#countryDialCode').val(selectedCountry.dialcode);
            } else {
                toastr.error('Ülke bulunamadı', 'Hata');
            }
        }

        // Toastr options
        // Toastr ayarları: Sağ alt köşede göster
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-bottom-right",  // Sağ alt köşe
            "preventDuplicates": true,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };


        function loadCities(countryId, defaultCityId = null) {
            if (countryId) {
                $.ajax({
                    url: '@Url.Action("GetCitiesByCountryId", "Customer")',
                    type: 'GET',
                    data: { countryId: countryId },
                    success: function (response) {
                        var citySelect = $('#CityId');
                        citySelect.empty();
                        citySelect.append(new Option('@localizer["SelectCity"]', ''));
                        if (response && response.length > 0) {
                            response.forEach(function (city) {
                                citySelect.append(new Option(city.name, city.id));
                            });
                            if (defaultCityId) {
                                citySelect.val(defaultCityId);
                            }
                        } else {
                            citySelect.append(new Option('@localizer["NoCityFound"]', '', true, true));
                        }
                    },
                    error: function () {
                        toastr.error('@localizer["AnErrorOccurred"]', 'Hata');
                    }
                });
            } else {
                $('#CityId').empty();
                $('#CityId').append(new Option('@localizer["SelectCity"]', ''));
            }
        }

        $('#updateForm').on('submit', function (e) {
            var isValid = iti.isValidNumber();
            if (!isValid) {
                e.preventDefault();
                toastr.error('@localizer["Phone_Number_Error"]', '@localizer["Phone_Error"]');
            } else {
                $('#fullPhoneNumber').val(iti.getNumber());
            }
        });
    });
</script>