@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer

@model BaSalesManagementApp.MVC.Models.BranchVMs.BranchUpdateVM

@{
    ViewData["Title"] = @localizer["Update"];
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["Branch"] /</span> @localizer["Update"]
        </h4>
        <div class="row">
            <div class="content-wrapper">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <form asp-action="Update" onsubmit="return validateForm()">
                                <input hidden asp-for="Id" class="form-control" />
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                                <div class="mb-3">
                                    <label asp-for="Name" class="control-label">@localizer["BranchName"].ToString().ToUpper(new System.Globalization.CultureInfo("tr-TR"))</label>
                                    <input asp-for="Name" id="BranchName" class="form-control"
                                           data-val="true"
                                           data-val-required="@localizer[Messages.BRANCH_NAME_NOT_EMPTY]"
                                           data-val-minlength="@localizer[Messages.BRANCH_NAME_MINIMUM_LENGTH]"
                                           data-val-maxlength="@localizer[Messages.BRANCH_NAME_MAXIMUM_LENGTH]" />
                                    <span asp-validation-for="Name" id="branchNameError" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Address" class="control-label">@localizer["Address"].ToString().ToUpper(new System.Globalization.CultureInfo("tr-TR"))</label>
                                    <input asp-for="Address" id="Address" class="form-control"
                                           data-val="true"
                                           data-val-required="@localizer[Messages.BRANCH_ADDRESS_NOT_EMPTY]"
                                           data-val-minlength="@localizer[Messages.BRANCH_ADDRESS_MINIMUM_LENGTH]"
                                           data-val-maxlength="@localizer[Messages.BRANCH_ADDRESS_MAXIMUM_LENGTH]" />
                                    <span asp-validation-for="Address" id="addressError" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="CompanyId" class="form-label">@localizer["Company"]</label>
                                    <select asp-for="CompanyId" id="CompanyId" class="form-control selectedCompany"
                                            data-val="true"
                                            data-val-required="@localizer[Messages.BRANCH_COMPANY_RELATION]">
                                        @if (Model.Companies != null && Model.CompanyId != null)
                                        {
                                            @foreach (var company in Model.Companies)
                                            {
                                                @if (company.Id == Model.CompanyId)
                                                {
                                                    <option value="@company.Id" selected>@company.Name</option>
                                                }
                                                else
                                                {
                                                    <option value="@company.Id">@company.Name</option>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <option value="" disabled selected></option>
                                        }
                                    </select>
                                    <span asp-validation-for="CompanyId" id="companyError" class="text-danger"></span>
                                </div>

                                <div>
                                    <input type="submit" value="@localizer["Update"]" class="btn btn-primary" />
                                    <a asp-action="Index" class="btn btn-secondary">@localizer["BackToList"]</a>
                                </div>

                                @for (int i = 0; i < Model.Companies.Count(); i++)
                                {
                                    <input type="hidden" name="Companies[@i].Id" value="@Model.Companies.ElementAt(i).Id" />
                                    <input type="hidden" name="Companies[@i].Name" value="@Model.Companies.ElementAt(i).Name" />
                                }
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script>
        $(document).ready(function () {
            $('.selectedCompany').select2({
                placeholder: "@Html.Raw(localizer["Select_Company"])",
                allowClear: true,
                width: '100%',
                matcher: function (params, data) {
                    if ($.trim(params.term) === '') {
                        return data;
                    }

                    if (typeof data.text === 'undefined') {
                        return null;
                    }

                    var searchTerm = params.term.toLowerCase();
                    var optionText = data.text.toLowerCase();

                    if (optionText.indexOf(searchTerm) === 0) {
                        return data;
                    }

                    return null;
                },
                sorter: function (data) {
                    return data.sort(function (a, b) {
                        return a.text.localeCompare(b.text);
                    });
                },
                language: {
                    noResults: function () {
                        return '@Html.Raw(localizer["No matching results"])';
                    }
                }
            })
        })
    </script>
    <script>
          
        $(document).ready(function () {
            // Company validation
            $('#CompanyId').on('change', function () {
                var companyValue = $(this).val();
                var errorMessage = $('#companyError');
                var requiredMessage = $(this).data('val-required');

                if (companyValue === "" || companyValue === null) {
                    errorMessage.text(requiredMessage).show();
                } else {
                    errorMessage.text('').hide();
                }
            });

            // Form validation
            function validateForm() {
                var branchNameError = $('#branchNameError').text();
                var addressError = $('#addressError').text();
                var companyValue = $('#CompanyId').val();
                var companyError = $('#companyError').text();

                if (!companyValue || companyValue === "") {
                    $('#companyError').text($('#CompanyId').data('val-required')).show();
                    return false;  // Form gönderimini engelle
                }

                if (branchNameError || addressError || companyError) {
                    return false;  // Form gönderimini engelle
                }

                return true;  // Formu gönder
            }
        });

        $(document).ready(function () {
            // Branch name validation
            $('#BranchName').on('input', function () {
                var branchNameValue = $(this).val();
                var errorMessage = $('#branchNameError');

                var requiredMessage = $(this).data('val-required');
                var minLengthMessage = $(this).data('val-minlength');
                var maxLengthMessage = $(this).data('val-maxlength');

                if (branchNameValue.length === 0) {
                    errorMessage.text(requiredMessage).show();
                } else if (branchNameValue.length < 2) {
                    errorMessage.text(minLengthMessage).show();
                } else if (branchNameValue.length > 128) {
                    errorMessage.text(maxLengthMessage).show();
                } else {
                    errorMessage.text('').hide();
                }

                var capitalizedValue = branchNameValue.replace(/\b\w/g, function (c) {
                    return c.toUpperCase();
                });
                $(this).val(capitalizedValue);
            });

            // Address validation
            $('#Address').on('input', function () {
                var addressValue = $(this).val();
                var errorMessage = $('#addressError');

                var requiredMessage = $(this).data('val-required');
                var minLengthMessage = $(this).data('val-minlength');
                var maxLengthMessage = $(this).data('val-maxlength');

                if (addressValue.length === 0) {
                    errorMessage.text(requiredMessage).show();
                } else if (addressValue.length < 2) {
                    errorMessage.text(minLengthMessage).show();
                } else if (addressValue.length > 128) {
                    errorMessage.text(maxLengthMessage).show();
                } else {
                    errorMessage.text('').hide();
                }

                var capitalizedValue = addressValue.replace(/\b\w/g, function (c) {
                    return c.toUpperCase();
                });
                $(this).val(capitalizedValue);
            });
        });
    </script>
}
